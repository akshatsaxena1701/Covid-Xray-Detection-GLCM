# -*- coding: utf-8 -*-
"""cvpr2019kucp1067-Project-II.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RgY85gQqeRmITIuL6MN6p62pej1ECsy3
"""

import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import scipy
import pickle
import cv2
import math
import statistics

from numpy import newaxis
from numpy import array
from os.path import dirname, join
from tqdm import tqdm
from PIL import Image
from skimage.feature import greycomatrix, greycoprops

class glcm:
    def __init__(self, image):
        distance = [1, 2, 3]
        angles = [0, np.pi/4, np.pi/2, 3*np.pi/4]
        self.image = img_as_ubyte(image.astype('int64'))
        self.glcm_mat = greycomatrix(self.image, distances = distance, angles = angles, symmetric = True, normed = True)
        self.properties = ['correlation', 'homogeneity', 'contrast', 'energy']
            
    def correlation(self):
        return greycoprops(self.glcm_mat, 'correlation').flatten()
    
    def homogeneity(self):
        return greycoprops(self.glcm_mat, 'homogeneity').flatten()
    
    def contrast(self):
        return greycoprops(self.glcm_mat, 'contrast').flatten()
    
    def energy(self):
        return greycoprops(self.glcm_mat, 'energy').flatten()
    
    def glcm_all(self):
        return np.hstack([greycoprops(self.glcm_mat, props).ravel() for props in self.properties])

# from google.colab import drive
# drive.mount('/content/drive')

# # !ls "/content/drive/My Drive"
# %cd /content/drive/My Drive/CVPRProject

from PIL import Image
import glob
image_list_train_normal = []
image_list_train_viral=[]
image_list_train_covid=[]
image_list_test_normal = []
image_list_test_viral=[]
image_list_test_covid=[]
import cv2
import os
folder_normal='Covid19-dataset/train/Normal'
for filename in os.listdir(folder_normal):
    img = cv2.imread(os.path.join(folder_normal,filename))
    if img is not None:
        image_list_train_normal.append(img)

folder_viral='Covid19-dataset/train/Viral Pneumonia'
for filename in os.listdir(folder_viral):
    img = cv2.imread(os.path.join(folder_viral,filename))
    if img is not None:
        image_list_train_viral.append(img)
folder_covid='Covid19-dataset/train/Covid'
for filename in os.listdir(folder_covid):
    img = cv2.imread(os.path.join(folder_covid,filename))
    if img is not None:
        image_list_train_covid.append(img)
folder_normal='Covid19-dataset/test/Normal'
for filename in os.listdir(folder_normal):
    img = cv2.imread(os.path.join(folder_normal,filename))
    if img is not None:
        image_list_test_normal.append(img)
folder_normal='Covid19-dataset/test/Viral Pneumonia'
for filename in os.listdir(folder_normal):
    img = cv2.imread(os.path.join(folder_normal,filename))
    if img is not None:
        image_list_test_viral.append(img)
folder_normal='Covid19-dataset/test/Covid'
for filename in os.listdir(folder_normal):
    img = cv2.imread(os.path.join(folder_normal,filename))
    if img is not None:
        image_list_test_covid.append(img)

image_data_train=pd.DataFrame()
image_data_test=pd.DataFrame()
# image_data_train_covid=pd.DataFrame()
# image_data_train_viral=pd.DataFrame()
# image_data_test_normal=pd.DataFrame()
# image_data_test_covid=[]
# image_data_test_viral=[]

for image in image_list_train_normal:
  im = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  features = glcm(im).glcm_all()
  features = np.append(features,'Normal')
  feature_df=pd.DataFrame(features)
  feature_df=feature_df.transpose()
  image_data_train=image_data_train.append(feature_df)

  # image_data_train_nomral=pd.DataFrame(image_data_train_normal)
  # image_data_train_normal['Output']='Normal'

for image in image_list_train_covid:
  im = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  features = glcm(im).glcm_all()
  features = np.append(features,'Covid')
  feature_df=pd.DataFrame(features)
  feature_df=feature_df.transpose()
  image_data_train=image_data_train.append(feature_df)



for image in image_list_train_viral:
  im = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  features = glcm(im).glcm_all()
  features = np.append(features,'Viral')
  feature_df=pd.DataFrame(features)
  feature_df=feature_df.transpose()
  image_data_train=image_data_train.append(feature_df)



for image in image_list_test_covid:
  im = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  features = glcm(im).glcm_all()
  features = np.append(features,'Covid')
  feature_df=pd.DataFrame(features)
  feature_df=feature_df.transpose()
  image_data_test=image_data_test.append(feature_df)


for image in image_list_test_normal:
  im = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  features = glcm(im).glcm_all()
  features = np.append(features,'Normal')
  feature_df=pd.DataFrame(features)
  feature_df=feature_df.transpose()
  image_data_test=image_data_test.append(feature_df)


for image in image_list_test_viral:
  im = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  features = glcm(im).glcm_all()
  features = np.append(features,'Viral')
  feature_df=pd.DataFrame(features)
  feature_df=feature_df.transpose()
  image_data_test=image_data_test.append(feature_df)

print(image_data_train.shape)
print(image_data_test.shape)

X_train = image_data_train.iloc[:,:-1];
y_train = image_data_train.iloc[:,-1];
X_test = image_data_test.iloc[:,:-1];
y_test = image_data_test.iloc[:,-1];

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,confusion_matrix
RFclf = RandomForestClassifier()
RFclf.fit(X_train,y_train)
y_pred = RFclf.predict(X_test)

accuracy=accuracy_score(y_test,y_pred)
print(accuracy)

cfm_matrix = confusion_matrix(y_test,y_pred)
print(cfm_matrix)

import seaborn as sns 
sns.heatmap(cfm_matrix,annot=True)

